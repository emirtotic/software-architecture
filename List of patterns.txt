1. Singleton Pattern (Kreacioni)
Osigurava da postoji samo jedna instanca klase i omogućava globalni pristup toj instanci.

2.Factory Method Pattern (Kreacioni)
Koristi se za kreiranje objekata preko "fabrike" koja odlučuje koji tačan podtip će biti kreiran, što olakšava dodavanje
novih podtipova bez izmene klijentskog koda.

3. Observer Pattern (Ponašajni)
Omogućava objektima da budu obavešteni o promenama u drugom objektu, korisno za obaveštavanje više posmatrača o promenama stanja.

4. Strategy Pattern (Ponašajni)
Omogućava izbor među različitim algoritmima (strategijama) u zavisnosti od situacije, bez izmene klase koja ih koristi.

5. Builder Pattern (Kreacioni)
Omogućava postepeno kreiranje složenih objekata, posebno korisno kada objekat ima mnogo opcionalnih parametara ili
kada je poželjna fluent API sintaksa.

6. Decorator Pattern (Strukturni)
Omogućava dinamičko dodavanje novih funkcionalnosti objektu tako što ga "omotamo" u dekorator klasu. Svaki dekorator
implementira isti interfejs kao i originalni objekat, ali može proširiti ponašanje objekta pre ili posle poziva metoda,
čineći kôd modularnijim i fleksibilnijim.

7. Facade Pattern (Strukturni)
Pruža pojednostavljeno sučelje koje objedinjuje složeni podsistem. Umesto da klijent direktno pristupa pojedinačnim
komponentama podsistema, koristi Facade klasu koja objedinjuje te komponente u jasnije i jednostavnije sučelje. Ovo
smanjuje zavisnost klijenta od unutrašnjih detalja podsistema i pojednostavljuje interakciju.

8. Command Pattern (Ponašajni)
Enkapsulira zahtev ili operaciju kao objekat, omogućavajući fleksibilno pokretanje, odlaganje i poništavanje komandi.
Koristan je u implementaciji funkcionalnosti kao što su undo/redo i u scenarijima gde se akcije izvršavaju na
različitim uređajima ili objektima, što čini klijentski kod nezavisnim od specifičnih implementacija komandi.

   Struktura Command Pattern-a:
       Interfejs Command koji definiše execute() metodu za izvršavanje komande.
       Konkretne komande (npr. TurnOnLightCommand, TurnOffLightCommand) koje implementiraju Command interfejs
       i sadrže specifičnu logiku.
       Invoker (npr. RemoteControl) koji pokreće komande.
       Receiver (npr. Light, Fan) koji sadrži osnovne operacije kao što su on() i off().